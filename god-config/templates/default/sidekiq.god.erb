# Configure god process monitoring for Sidekiq.

rails_env  = "<%= @params[:env] %>" || "development"
rails_root = "<%= @params[:app_root] %>"

# num_workers = rails_env == 'production' ? 3 : 2
num_workers = 1

num_workers.times do |num|
  God.watch do |w|
    w.dir      = "#{rails_root}"
    w.name     = "sidekiq-#{num}"
    w.group    = 'sidekiq'
    w.interval = 30.seconds
    w.env      = {"RAILS_ENV" => rails_env}
    w.pid_file = "#{rails_root}/tmp/pids/#{w.name}.pid"
    w.start    = "bundle exec sidekiq -C #{rails_root}/config/sidekiq.yml"
    w.stop     = "sidekiqctl stop #{w.pid_file} 60"
    w.uid      = '<%= @params[:uid] %>'
    w.gid      = '<%= @params[:gid] %>'
    w.keepalive

    # clean pid files before start if necessary
    w.behavior(:clean_pid_file)

    # restart if memory gets too high
    w.transition(:up, :restart) do |on|
      on.condition(:memory_usage) do |c|
        c.above = <%= @params[:max_memory] %>.megabytes
        c.times = 2
      end
    end

    # determine the state on startup
    w.transition(:init, { true => :up, false => :start }) do |on|
      on.condition(:process_running) do |c|
        c.running = true
      end
    end

    # determine when process has finished starting
    w.transition([:start, :restart], :up) do |on|
      on.condition(:process_running) do |c|
        c.running = true
        c.interval = 5.seconds
      end

      # failsafe
      on.condition(:tries) do |c|
        c.times = 5
        c.transition = :start
        c.interval = 5.seconds
      end
    end

    # start if process is not running
    w.transition(:up, :start) do |on|
      on.condition(:process_running) do |c|
        c.running = false
      end
    end
  end
end
