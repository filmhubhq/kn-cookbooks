# /etc/init/sidekiq.conf - Sidekiq config

# This example config should work with Ubuntu 12.04+.  It
# allows you to manage multiple Sidekiq instances with
# Upstart, Ubuntu's native service management tool.
#
# See workers.conf for how to manage all Sidekiq instances at once.
#
# Save this config as /etc/init/sidekiq.conf then manage sidekiq with:
#   sudo start sidekiq index=0
#   sudo stop sidekiq index=0
#   sudo status sidekiq index=0
#
# Hack Upstart's reload command to 'quiet' Sidekiq:
#
#   sudo reload sidekiq index=0
#
# or use the service command:
#   sudo service sidekiq {start,stop,restart,status}
#
# This script is not meant to start on bootup, workers.conf
# will start all sidekiq instances explicitly when it starts.
#
# Logs out to /var/log/upstart/sidekiq.log by default
#

description "Sidekiq Background Worker"

# Deployment user
# setuid <%= @deploy[:user] %>
# setgid <%= @deploy[:group] %>

respawn
respawn limit 3 30

# TERM is sent by sidekiqctl when stopping sidekiq. Without declaring these as
# normal exit codes, it just respawns.
normal exit 0 TERM

# Older versions of Upstart might not support the reload command and need
# this commented out.
reload signal USR1

instance $index

script
exec /bin/bash <<'EOT'
  cd <%= "#{deploy[:deploy_to]}/current" %>
  exec bundle exec sidekiq -i ${index} -e production
EOT
end script
